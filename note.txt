HOW TO WRITE A PRODUCTION READY NODE AND EXPRESS APP
source - https://www.freecodecamp.org/news/how-to-write-a-production-ready-node-and-express-app-f214f0b17d8c/

Project Structuring-
When your codebase grows you end up having long route handlers. This makes your code hard to understand and it contains potential bugs. Over time, 
while working with both small teams and large teams, I realized what kind of structure can grow with your project and still be easy to maintain.

MODEL VIEW CONTROLLER(mvc)

The MVC pattern helps in rapid and parallel development. 
For example, one developer can work on the view, while another one can work on creating the business logic in the controller.
Let’s take a look at an example of a simple user CRUD application.

project/
  controllers/
    users.js
  util/
    plugin.js
  middlewares/
    auth.js
  models/
    user.js
  routes/
    user.js
    router.js
  public/
    js/
    css/
    img/
  views/
    users/
      index.jade
  tests/
    users/
      create-user-test.js 
      update-user-test.js
      get-user-test.js
  .gitignore
  app.js
  package.json

- controllers: Define your app route handlers and business logic
- util: Writes utility/helper functions here which can be used by any controllers. For example, you can write a function like mergeTwoArrays(arr1, arr2).
- middlewares: You can write middlewares to interpret all incoming requests before moving to the route handler. For example,
- router.post('/login', auth, controller.login) where auth is a middleware function defined in middlewares/auth.js.
- models: also a kind of middleware between your controller and the database. You can define a schema and do some validation before writing to the database. For example, you can use an ORM like Mongoose which comes with great features and methods to use in the schema itself
- routes: Define your app routes, with HTTP methods. For example, you can define everything related to the user.
- router.post('/users/create', controller.create)
- router.put('/users/:userId', controller.update)
- router.get('/users', controller.getAll)
- public: Store static images in/img, custom JavaScript files, and CSS /css
- views: Contains templates to be rendered by the server.
- tests: Here you can write all the unit tests or acceptance tests for the API server.
- app.js: Acts as the main file of the project where you initialize the app and other elements of the project.
- package.json: Takes care of the dependencies, the scripts to run with the npm command, and the version of your project.


Exceptions and Error Handling-

Using promises
One of the advantages of using promises over callbacks is they can handle implicit or explicit exceptions/errors in asynchronous code blocks as well as for synchronous code defined in .then(), a promise callback
Just add .catch(next) at the end of the promise chain. For example:

router.post('/create', (req, res, next) => {

   User.create(req.body)    // function to store user data in db
   .then(result => {
   
     // do something with result
    
     return result 
   })
   .then(user => res.json(user))
   .catch(next)
})

Using try-catch-
Try-catch is a traditional way of catching exceptions in asynchronous code.
Let’s take a look at an example with a possibility of getting an exception:

router.get('/search', (req, res) => {
 
  setImmediate(() => {
    const jsonStr = req.query.params
    try {
      const jsonObj = JSON.parse(jsonStr)
      
      res.send('Success')
    } catch (e) {
      res.status(400).send('Invalid JSON string')
    }
  })
})

Avoid using synchronous code-

Synchronous code also known as blocking code, because it blocks the execution until they are executed.
So avoid using synchronous functions or methods that might take milliseconds or microseconds. For a high traffic website it will compound and may lead to high latency or response time of the API requests.

Don’t use them in production especially :)
Many Node.js modules come with both .sync and .async methods, so use async in production.

Logging properly -
Logging is essential for debugging and app activity. It is used mainly for development purposes. We use console.log and console.error but these are synchronous functions.

For Debugging purposes -
You can use a module like debug. This module enables you to use the DEBUG environment variable to control what debug messages are sent to console.err(), if any.

Set NODE_ENV to “production”
The NODE_ENV environment variable specifies the environment in which an application is running (usually, development or production). One of the simplest things you 
can do to improve performance is to set NODE_ENVto “production.”

Setting NODE_ENV to “production” makes Express:
- Cache view templates.
- Cache CSS files generated from CSS extensions.
- Generate less verbose error messages.

Using Process Manager:
For production, you should not simply use node app.j — if your app crashes, it will be offline until you restart it.
The most popular process managers for Node are:
StrongLoop Process Manager
- PM2
- Forever
- I personally use PM2.

Run your app in a cluster:
In a multi-core system, you can increase the performance of a Node app by many times by launching a cluster of processes.
A cluster runs multiple instances of the app, ideally one instance on each CPU core. This distributes the load and tasks among the instances.

Using Node’s cluster module:
Clustering is made possible with Node’s cluster module. This enables a master process to spawn worker processes. 
It distributes incoming connections among the workers.
However, rather than using this module directly, it’s far better to use one of the many tools out there that do it for you automatically. 
For example node-pm or cluster-service.

Using PM2
For pm2 you can use cluster directly through a command. For example,

# Start 4 worker processes
pm2 start app.js -i 4
# Auto-detect number of available CPUs and start that many worker processes
pm2 start app.js -i max 


